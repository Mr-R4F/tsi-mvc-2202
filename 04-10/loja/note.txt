//Anteriores

//controle de acesso (necessário dependencia) -> composer require laravel/ui --dev (para criar tela de login)
bootstrap para recursos visuais php artisan ui boostrap (rodar o npm install e npm run dev para compilar
/ controllers

crud

cria controle para crud
php artisan make:controller clicnetesController --resource (para criar o controle)

token

//buscar os dados na model

rota resource -para funcionar como crud
ver como controla e como cria um controle para perfil de usuário e controlar as funcionalidades
//
pacotes do blade para lidar comas as classes html
acesso por perfil apenas o can permite isso

view::clear - limpa o cache das views
migration meche no banco

criar o CRUD php artisan make:controller vendedoresController -- resource (criar CRUD)
encapsular
cp -r (copia de forma recursiva) varre a arvore de diretórios e o que achar de clientes vai mandar para vendedoresclientes vendedores -r
necessário ESTAR NA PSTA VIEWS

VIEW E VALIDATE
(PLACE HOLDER)

===========================================================================================================================
04-10

composer require laravel/breeze --dev (dependencia para ter autenticação dependencia necessária para funcionar autenticação
php artisan breeze:install -> instala o breeze

npm install && npm run dev -> prepara toda a parte da tela de login

composer require spatie/laravel-permission -> cria controles de acesso por permissão (adm, clientes ...)
composer require laravelcollective/html

PREPARAÇÃO
colocar o provider em config/ app.php
colocar o arqv de configuração em config/permission.php e criar migration
php artisan vendor:publish --provider=Spatie\Permission\PermissionServiceProvider -> entra do app.php
php artisan migrate

registrar o middleware do pacote -> programas a serem chamadados no controller (entre a aplicação e requisição, controla determinada coisa)
app -> http -> kernel -> root middleware
add os 3 middlewares
'role' =>\Spatie\Permission\Middlewares\RoleMiddleware::class,
'permission' =>\Spatie\Permission\Middlewares\PermissionMiddleware::class,
'role_or_permission' =>\Spatie\Permission\Middlewares\RoleOrPermissionMiddleware::class,

na model user.php (a que vem com os items do usuário) é preciso add trait HasRules (o php não pode herdar de duas classes)
trait HasRules -> herda um classe mesmo já tendo herdado de outra classe

criar controllers para usuário e papéis (perfis)

php artisan make:controller UserController --resource -> fazer a controler
fazer no CRUD

--
para hash usar ndo laravel

